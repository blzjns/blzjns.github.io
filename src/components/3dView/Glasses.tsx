/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nattsol (https://sketchfab.com/nattsol)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/glasses-3d-model-74c1d202ac0249e39823e379e2b065e9
Title: Glasses 3D model
*/

import { useGLTF } from '@react-three/drei';
import { UseGLTFProps } from './constants';

import glasses3d from '../../3dModels/glasses.glb';
import { RefObject } from 'react';
import { useGSAP } from '@gsap/react';
import gsap from 'gsap';
// import { ScrollTrigger } from 'gsap/ScrollTrigger';

useGLTF.preload(glasses3d);

// gsap.registerPlugin(ScrollTrigger);

interface GlassesProps {
  targetViewRef: RefObject<HTMLDivElement | null>;
  selfRef: RefObject<null>;
  callbackFn: Function;
}

export function Glasses({ targetViewRef, selfRef, callbackFn }: GlassesProps) {
  useGSAP(() => {
    const timeline = gsap.timeline({
      scrollTrigger: {
        trigger: 'body',
        start: 'top center',
        end: 'bottom center',
        scrub: true,
        markers: true
      }
    });

    !!selfRef?.current &&
      timeline
        .to(selfRef.current['position'], {
          x: 0,
          y: 2,
          z: 0
        })
        .to(selfRef.current['rotation'], {
          y: 3.1,
          duration: 2
        })
        .to(selfRef.current['scale'], {
          x: 40,
          y: 40,
          z: 40,
          duration: 2
        })
        .call(() => {
          if (!targetViewRef?.current) {
            return;
          }

          targetViewRef.current.style.animation = 'image_blur 2s';
        })
        .to(selfRef.current['scale'], {
          x: 200,
          y: 200,
          z: 200,
          duration: 2
        })
        .call(() => {
          if (!targetViewRef?.current || !selfRef?.current) {
            return;
          }

          targetViewRef.current.style.filter = 'blur(0px)';
          callbackFn();
        });
  });

  const { nodes, materials } = useGLTF(glasses3d) as unknown as UseGLTFProps;
  return (
    <group ref={selfRef} dispose={null} scale={15}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_5.geometry}
        material={materials.Frame}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={materials.Lens}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_11.geometry}
        material={materials.Nosepads}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_14.geometry}
        material={materials.Temple}
        position={[0.068, 0.028, -0.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_17.geometry}
        material={materials.Temple}
        position={[-0.068, 0.028, -0.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_20.geometry}
        material={materials.Temple_tips}
        position={[0.068, 0.028, -0.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_23.geometry}
        material={materials.Temple_tips}
        position={[-0.068, 0.028, -0.02]}
      />
    </group>
  );
}
